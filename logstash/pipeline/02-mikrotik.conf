#tcp syslog stream via 514
input {
    tcp {
        type => "syslog"
        port => 5140
    }
}
#udp syslogs stream via 514
input {
    udp {
        type => "syslog"
        port => 5140
    }
}
# filter properties
filter {
    if [type] == "syslog" {
        grok { # using GROK for filtering
            match => {
                "message" => [
                    "%{WORD:syslogtype} dns: query from %{IP:clientip}: #%{NUMBER:requestid} %{URIHOST:nsname}. %{WORD:nstype}",
                    "system,%{WORD:syslogtype},.*? login failure for user %{USERNAME:username} from %{IP:srcip} via %{WORD:via}",
                    "%{WORD:syslogtype},info firewall: %{WORD:filter}: in:%{DATA:in} out:%{DATA:out}, src-mac %{MAC:srcmac}, proto %{DATA:proto}, %{IP:srcip}:%{POSINT:srcport}->%{IP:dstip}:%{POSINT:dstport}, len %{NUMBER:len}",
                    "%{WORD:syslogtype}: +%{IP:clientip} %{WORD:requesttype} %{URI:url} +action=%{WORD:action} +cache=%{WORD:cache}"
                ]
            }
            add_field => [ "received_at", "%{@timestamp}" ]
            add_field => [ "received_from", "%{host}" ]
            add_field => [ "clienthostname", "%{clientip}" ]
        }

        if [clienthostname]  {
            dns {
                reverse => [ "clienthostname" ]
                action => "replace"
            }
        }

        if [srcip]  {
            geoip {
                source => "srcip"
                target => "geoip"
                add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
                add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
            }
            mutate {
                convert => [ "[geoip][coordinates]", "float" ]
            }
        }

        date {
            match => [ "syslog_timestamp", "MMM d HH:mm:ss", "MMM dd HH:mm:ss" ]
        }
    }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "syslog-%{+YYYY.MM.dd}"
    manage_template => true
    codec => "plain"
    template_name => "logstash"
    template_overwrite => false
  }
}